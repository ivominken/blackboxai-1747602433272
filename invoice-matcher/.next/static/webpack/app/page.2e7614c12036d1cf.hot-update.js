"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/parsers.ts":
/*!****************************!*\
  !*** ./src/lib/parsers.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   amountsAreEqual: function() { return /* binding */ amountsAreEqual; },\n/* harmony export */   extractInvoiceNumbers: function() { return /* binding */ extractInvoiceNumbers; },\n/* harmony export */   parseBankCSV: function() { return /* binding */ parseBankCSV; },\n/* harmony export */   parseDutchAmount: function() { return /* binding */ parseDutchAmount; },\n/* harmony export */   parseInvoiceCSV: function() { return /* binding */ parseInvoiceCSV; },\n/* harmony export */   standardizeDate: function() { return /* binding */ standardizeDate; }\n/* harmony export */ });\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! papaparse */ \"(app-pages-browser)/./node_modules/papaparse/papaparse.min.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_0__);\n/**\n * Utility functions for parsing CSV files with specific Dutch formatting\n */ \n/**\n * Convert Dutch formatted amount string to number in cents\n * @param amount Amount string in Dutch format (e.g., \"1.234,56\" or \"-1.234,56\")\n * @returns ParsedAmount object with value in cents\n */ function parseDutchAmount(amount) {\n    console.log(\"Parsing Dutch amount:\", amount);\n    // Remove whitespace and handle negative numbers\n    const cleanAmount = amount.trim().replace(/\\s+/g, \"\");\n    console.log(\"After cleaning whitespace:\", cleanAmount);\n    const isNegative = cleanAmount.startsWith(\"-\");\n    console.log(\"Is negative:\", isNegative);\n    // Convert Dutch notation to standard number\n    const withoutThousands = cleanAmount.replace(/\\./g, \"\"); // Remove thousands separators\n    console.log(\"After removing thousands separators:\", withoutThousands);\n    const withDecimalPoint = withoutThousands.replace(\",\", \".\"); // Convert decimal comma to point\n    console.log(\"After converting decimal separator:\", withDecimalPoint);\n    const standardized = withDecimalPoint.replace(/[^0-9.\\-]/g, \"\"); // Remove any remaining non-numeric chars\n    console.log(\"After removing non-numeric chars:\", standardized);\n    // Convert to cents (multiply by 100)\n    const floatValue = parseFloat(standardized);\n    console.log(\"After parsing to float:\", floatValue);\n    const valueInCents = Math.round(floatValue * 100);\n    console.log(\"Final value in cents:\", valueInCents);\n    return {\n        value: valueInCents,\n        original: amount.trim()\n    };\n}\n/**\n * Convert Dutch date format to ISO date string\n * @param date Date string in DD-MM-YYYY format\n * @returns Date string in YYYY-MM-DD format\n */ function standardizeDate(date) {\n    let format = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"NL\";\n    if (format === \"NL\") {\n        // Convert DD-MM-YYYY to YYYY-MM-DD\n        const [day, month, year] = date.split(\"-\");\n        return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n    }\n    // Already in ISO format YYYY-MM-DD\n    return date;\n}\nfunction isRabobankFormat(row) {\n    return \"Munt\" in row && \"BIC\" in row && \"Volgnr\" in row;\n}\n/**\n * Parse bank transactions CSV (ANSI encoded, comma-separated)\n */ async function parseBankCSV(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            var _event_target;\n            if (!((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result)) {\n                reject(new Error(\"Failed to read file\"));\n                return;\n            }\n            const config = {\n                header: true,\n                delimiter: \",\",\n                newline: \"\\n\",\n                skipEmptyLines: true,\n                quoteChar: '\"',\n                complete: (results)=>{\n                    try {\n                        if (results.errors.length > 0) {\n                            throw new Error(results.errors[0].message);\n                        }\n                        const transactions = results.data.filter((row)=>{\n                            if (isRabobankFormat(row)) {\n                                return row[\"Datum\"] && row[\"Bedrag\"];\n                            } else {\n                                return row[\"Datum\"] && row[\"Bedrag\"];\n                            }\n                        }).map((row)=>{\n                            if (isRabobankFormat(row)) {\n                                return {\n                                    datum: row[\"Datum\"] || \"\",\n                                    bedrag: row[\"Bedrag\"] || \"\",\n                                    omschrijving1: row[\"Omschrijving-1\"] || \"\",\n                                    omschrijving2: row[\"Omschrijving-2\"] || \"\",\n                                    omschrijving3: row[\"Omschrijving-3\"] || \"\",\n                                    transactiereferentie: row[\"Transactiereferentie\"] || row[\"Volgnr\"] || \"\",\n                                    naamTegenpartij: row[\"Naam tegenpartij\"] || \"\",\n                                    iban: row[\"Tegenrekening IBAN/BBAN\"] || row[\"IBAN/BBAN\"] || \"\"\n                                };\n                            } else {\n                                return {\n                                    datum: row[\"Datum\"] || \"\",\n                                    bedrag: row[\"Bedrag\"] || \"\",\n                                    omschrijving1: row[\"Omschrijving-1\"] || \"\",\n                                    omschrijving2: row[\"Omschrijving-2\"] || \"\",\n                                    omschrijving3: row[\"Omschrijving-3\"] || \"\",\n                                    transactiereferentie: row[\"Transactiereferentie\"] || \"\",\n                                    naamTegenpartij: row[\"Naam tegenpartij\"] || \"\",\n                                    iban: row[\"IBAN/BBAN\"] || \"\"\n                                };\n                            }\n                        });\n                        resolve(transactions);\n                    } catch (error) {\n                        reject(new Error(\"Failed to parse bank transactions: \".concat(error.message)));\n                    }\n                }\n            };\n            papaparse__WEBPACK_IMPORTED_MODULE_0___default().parse(event.target.result, config);\n        };\n        reader.onerror = ()=>{\n            reject(new Error(\"Failed to read file\"));\n        };\n        reader.readAsText(file, \"windows-1252\");\n    });\n}\n/**\n * Parse invoice CSV (UTF-8 encoded, tab-separated)\n */ async function parseInvoiceCSV(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>{\n            var _event_target;\n            if (!((_event_target = event.target) === null || _event_target === void 0 ? void 0 : _event_target.result)) {\n                reject(new Error(\"Failed to read file\"));\n                return;\n            }\n            // Pre-process the CSV content to remove leading/trailing whitespace and tabs\n            const cleanedContent = event.target.result.split(\"\\n\").map((line)=>line.trim()).join(\"\\n\");\n            const config = {\n                header: true,\n                delimiter: \"\t\",\n                newline: \"\\n\",\n                skipEmptyLines: true,\n                quoteChar: '\"',\n                transformHeader: (header)=>header.trim(),\n                transform: (value)=>value.trim(),\n                complete: (results)=>{\n                    try {\n                        if (results.errors.length > 0) {\n                            throw new Error(results.errors[0].message);\n                        }\n                        const invoices = results.data.filter((row)=>row[\"Factuurnummer\"] && row[\"Bedrag incl. BTW\"]).map((row)=>{\n                            var _row_Factuurdatum, _row_Factuurnummer, _row_BedraginclBTW, _row_Status, _row_Vergoedbedrag, _row_Debiteur, _row_Debnr;\n                            return {\n                                factuurdatum: ((_row_Factuurdatum = row[\"Factuurdatum\"]) === null || _row_Factuurdatum === void 0 ? void 0 : _row_Factuurdatum.trim()) || \"\",\n                                factuurnummer: ((_row_Factuurnummer = row[\"Factuurnummer\"]) === null || _row_Factuurnummer === void 0 ? void 0 : _row_Factuurnummer.trim()) || \"\",\n                                bedragInclBtw: ((_row_BedraginclBTW = row[\"Bedrag incl. BTW\"]) === null || _row_BedraginclBTW === void 0 ? void 0 : _row_BedraginclBTW.trim()) || \"\",\n                                status: ((_row_Status = row[\"Status\"]) === null || _row_Status === void 0 ? void 0 : _row_Status.trim()) || \"\",\n                                vergoedBedrag: ((_row_Vergoedbedrag = row[\"Vergoed bedrag\"]) === null || _row_Vergoedbedrag === void 0 ? void 0 : _row_Vergoedbedrag.trim()) || \"0,00\",\n                                debiteur: ((_row_Debiteur = row[\"Debiteur\"]) === null || _row_Debiteur === void 0 ? void 0 : _row_Debiteur.trim()) || \"\",\n                                debNr: ((_row_Debnr = row[\"Deb. nr.\"]) === null || _row_Debnr === void 0 ? void 0 : _row_Debnr.trim()) || \"\"\n                            };\n                        });\n                        resolve(invoices);\n                    } catch (error) {\n                        reject(new Error(\"Failed to parse invoices: \".concat(error.message)));\n                    }\n                }\n            };\n            papaparse__WEBPACK_IMPORTED_MODULE_0___default().parse(cleanedContent, config);\n        };\n        reader.onerror = ()=>{\n            reject(new Error(\"Failed to read file\"));\n        };\n        reader.readAsText(file, \"UTF-8\");\n    });\n}\n/**\n * Check if amounts are equal (within 1 cent difference due to rounding)\n */ function amountsAreEqual(amount1, amount2) {\n    return Math.abs(amount1.value - amount2.value) <= 1;\n}\n/**\n * Extract possible invoice numbers from bank transaction description\n */ function extractInvoiceNumbers(transaction) {\n    const descriptions = [\n        transaction.omschrijving1,\n        transaction.omschrijving2,\n        transaction.omschrijving3,\n        transaction.transactiereferentie\n    ].filter(Boolean);\n    const invoicePattern = /\\b20[0-9]{8,9}\\b/g; // Matches both formats: 2023120001 and 202400000707\n    return Array.from(new Set(descriptions.flatMap((desc)=>desc.match(invoicePattern) || [])));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/parsers.ts\n"));

/***/ })

});